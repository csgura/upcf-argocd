modules = [
	// 기본적으로 ulib 과 echolib 의 Defaults 가 필요합니다.
	ulib.Defaults
	echolib.Defaults
	
	// token 생성을 위해  TestTokenCreator 를 module에 추가합니다.
	echolib.TestTokenCreator
	
	// StartAllServer 를 포함 시키면  , http-servers 에 리스트업된 모든 서버가 실행됩니다.
	echolib.StartAllServer
	
	redislib.Defaults
	mongolib.Defaults
	mysqllib.Defaults
	
	ulib.Trace
	ulib.TraceAll
	
	upcf.Defaults
	
	upolicy.Defaults
	scpcli.Defaults
	scpcli.NRFLocalConfig
	scpcli.TokenLocalConfig
	// upcf.NrfAgent
	nrfregi.Defaults
	upcf.NoOpPolicyEngine

]

nrfclient {
	nrf.uri = "http://u5gc-scp-nrf:8000"
	nrf.uri = ${?NRF_URI}

}

metric {
	default {
		reporters = [
			{
				class: "logger",
				logger: metric
				interval: 60s
			},
			{
				class = csv,
				file-path = /app/stats/upcf,
				backup-previous = true,
				interval = 1s
				counter = {
					use = true,
					fields = [
						count
					]
				},
				# transaction = {
				# fields = [
				# request-total, response-total, success-total, failure-total
				# ]
				# }
				transaction-request = {
					use = true
				},
				transaction-response = {
					use = true
				}
			}
		]
	}
}

logrus {
	format = "text"
	config-file = ${CONFIG_DIR}/logger.conf
}

trace.config-path = ${CONFIG_DIR}/jaegertrace.yaml

policy-engine.addr = "http://localhost:18080"

http-servers {
	pcf {
		metric-registry = example
		port = 443
		tls = true
		serve-for = NF
		
		services {
			// pcf-smpolicy 서비스를 활성화 시킵니다.
			pcf-smpolicy {
				version = "1.1.8"
				// 규격대로 prefix 를 설정합니다.
				prefix = "/npcf-smpolicycontrol/v1"
				
				allowed-roles = [
					["nft:SMF"],
					["nft:NEF"],
					["nft:AF"]
				]
				capacity = 100,
				priority = 0,
				supportedFeatures = "00000000"
			
			}
			
			pcf-ampolicy {
				version = "1.1.6"
				
				// 규격대로 prefix 를 설정합니다.
				prefix = "/npcf-am-policy-control/v1"
				
				allowed-roles = [
					["nft:AMF"],
					["nft:NEF"]
				]
				capacity = 100,
				priority = 0,
				supportedFeatures = "00000000"
			}
			
			pcf-policy-auth {
				version = "1.1.6"
				
				// 규격대로 prefix 를 설정합니다.
				prefix = "/npcf-policyauthorization/v1"
				
				allowed-roles = [
					["nft:AF"],
					["nft:NEF"]
				]
				capacity = 100,
				priority = 0,
				supportedFeatures = "00010000"
			}
		}
	}
	
	pcf-clear {
		metric-registry = example
		port = 18080
		tls = false
		serve-for = NF
		
		services {
			// pcf-smpolicy 서비스를 활성화 시킵니다.
			pcf-smpolicy {
				version = "1.1.8"
				// 규격대로 prefix 를 설정합니다.
				prefix = "/npcf-smpolicycontrol/v1"
				
				capacity = 100,
				priority = 0,
				supportedFeatures = "00000000"
			
			}
		
		}
	}
}

pcf-service {
	api-root = "https://upcf-upcf.upcf.svc.cluster.local"
	
	revalidation-time-delta = 1m
	udr-client.request-timeout = 3s
	udr-noti-prefix = "udrnoti"
	udr-subs-expiry = 24h
	nfinfo-cache-duration = 1h
	ipv6-min-prefix-bits-len = 64
	smpolicy {
		supported-features = ["SamePcf", "QosMonitoring"]
	}
}

// 서버 인증서 및  ca list 파일 설정입니다.
cert-store {
	
	common-name = "upcf-upcf.upcf.svc.cluster.local"
	issuer = unrf
	nf-instance-id = acc8accc-3a24-11ed-a261-0242ac120002
	nf-type = PCF
	PLMN {
		mcc: 450,
		mnc: 05
	}
	
	peer-certs-file = ${CONFIG_DIR}/camel_git_cert.pem
	
	// token 생성에 사용할 인증서 입니다.
	named {
		unrf {
			cert-file = ${CONFIG_DIR}/unrf_cert.pem
			key-file = ${CONFIG_DIR}/unrf_key.pem
		}
		
		udr {
			issuer = unrf
			common-name = "upcf-udrsim.upcf.svc.cluster.local"
			nf-instance-id = 618fb6ba-3a33-11ed-a261-0242ac120002
			nf-type = UDR
			PLMN {
				mcc: 450,
				mnc: 05
			}
		}
	}
}

// jwt key 정보입니다. RS256 이나 ES256 을 사용하는 경우는 아래와 같이 인증서 파일을 지정하면 됩니다.
jwt-keys {
	b70cb766-8b50-4c35-948e-7f5369c4a38d {
		cert = ${CONFIG_DIR}/unrf_cert.pem
	}
}
upcf-db {
	db = [upcf-mysql-db]
}

// db 가 사용할 go routine pool 입니다.
upcf-db-pool {
	type = alarmPool
	pool-size = 20
}

upcf-mysql-db {
	driver = "mysql"
	pool = upcf-db-pool
	host = localhost
	host = ${?UPCF_DB_HOST_PORT}
	
	user = upcf
	user = ${?UPCF_DB_USER}
	password = "upcf.123!"
	password = ${?UPCF_DB_PASSWORD}
	# 
	// mysql은 dbname이 필요합니다
	dbname = upcf
	dbname = ${?UPCF_DB_NAME}
	max-open-conns = 10
    max-idle-conns = 10
    max-conn-lifetime = 10m
}



upcf-kv-store {
	driver: mongodb
	connstr: "mongodb://host.docker.internal:27017"
	connstr: ${?UPCF_MONGODB_HOST_PORT}
	dbname: upcf
	dbname: ${?UPCF_MONGODB_NAME}
	autoSchema: true
}


nrf-local-config: {
	"618fb6ba-3a33-11ed-a261-0242ac120002": {
		token: "hello world"
		nfServices: [{
			serviceInstanceId: "udr-1"
			fqdn: upcf-udrsim.upcf.svc.cluster.local
			nfServiceStatus: REGISTERED
			priority: 1
			scheme: https
			serviceName: nudr-dr
			oauth2Required: false
			versions: [{
				apiVersionInUri: v2
			}]
		}]
		nfStatus: REGISTERED
		nfType: UDR
		plmnList: [{
			mcc: 450
			mnc: "05"
		}]
		
		nfSetIdList: ["sethello.udrset.5gc.mnc050.mcc450"]
	}
}